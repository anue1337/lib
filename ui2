local SevereUI = {}
SevereUI.__index = SevereUI

-- Configurações padrão modernizadas
SevereUI.DefaultConfig = {
    title = "SevereUI Window",
    position = {20, 20},
    size = {400, 500},
    theme = {
        primary = {28, 28, 28},
        secondary = {35, 35, 35},
        accent = {0, 255, 255},
        text = {240, 240, 240},
        border = {60, 60, 60},
        hover = {50, 50, 50},
        dark = {20, 20, 20},
        highlight = {0, 150, 150}
    },
    transparency = 0.95,
    draggable = true,
    font = 2,
    textSize = 14,
    shadowIntensity = 0.3
}

-- Armazenar todas as instâncias de janelas criadas
SevereUI.Windows = {}
SevereUI.Notifications = {}
SevereUI.DeadZone = nil

function SevereUI.new(config)
    local window = {}
    setmetatable(window, SevereUI)
    
    -- Mesclar configuração padrão
    window.config = {}
    for k, v in pairs(SevereUI.DefaultConfig) do
        window.config[k] = config[k] or v
    end
    
    -- Propriedades da janela
    window.visible = true
    window.elements = {}
    window.tabs = {}
    window.currentTab = nil
    window.dragging = false
    window.dragOffset = {0, 0}
    window.depthEffects = {}
    
    -- Inicialização moderna
    window:Initialize()
    table.insert(SevereUI.Windows, window)
    
    return window
end

function SevereUI:Initialize()
    -- Elementos principais com efeitos
    self:CreateShadowEffects()
    self:CreateMainFrame()
    self:CreateModernTitleBar()
    self:CreateTabsContainer()
    
    if self.config.draggable then
        self:SetupDraggable()
    end
end

function SevereUI:CreateShadowEffects()
    for i = 1, 3 do
        local shadow = Drawing.new("Square")
        shadow.Size = {
            self.config.size[1] - (i * 2),
            self.config.size[2] - (i * 2)
        }
        shadow.Position = {
            self.config.position[1] + i,
            self.config.position[2] + i
        }
        shadow.Color = {0, 0, 0}
        shadow.Transparency = self.config.shadowIntensity * i
        shadow.Filled = true
        table.insert(self.depthEffects, shadow)
    end
end

function SevereUI:CreateMainFrame()
    self.frame = Drawing.new("Square")
    self.frame.Filled = true
    self.frame.Size = self.config.size
    self.frame.Position = self.config.position
    self.frame.Color = self.config.theme.primary
    self.frame.Transparency = self.config.transparency
    self.frame.Rounding = 2
end

function SevereUI:CreateModernTitleBar()
    -- Gradiente
    self.titleBar = {}
    local gradientSteps = 5
    for i = 0, gradientSteps do
        local element = Drawing.new("Square")
        element.Size = {self.config.size[1] / gradientSteps, 25}
        element.Position = {
            self.config.position[1] + (i * (self.config.size[1] / gradientSteps)),
            self.config.position[2]
        }
        element.Color = {
            self.config.theme.accent[1] * (i/gradientSteps),
            self.config.theme.accent[2] * (i/gradientSteps),
            self.config.theme.accent[3] * (i/gradientSteps)
        }
        element.Filled = true
        table.insert(self.titleBar, element)
    end
    
    -- Texto com efeito
    self.titleText = Drawing.new("Text")
    self.titleText.Text = self.config.title
    self.titleText.Position = {self.config.position[1] + 15, self.config.position[2] + 5}
    self.titleText.Color = self.config.theme.text
    self.titleText.Size = 16
    self.titleText.Font = self.config.font
    
    -- Sublinhado animado
    self.titleUnderline = Drawing.new("Square")
    self.titleUnderline.Size = {self.titleText.TextBounds.x, 2}
    self.titleUnderline.Position = {self.titleText.Position[1], self.titleText.Position[2] + 20}
    self.titleUnderline.Color = self.config.theme.accent
    self.titleUnderline.Filled = true
end

function SevereUI:CreateTabsContainer()
    self.tabsContainer = Drawing.new("Square")
    self.tabsContainer.Size = {self.config.size[1] - 20, 30}
    self.tabsContainer.Position = {self.config.position[1] + 10, self.config.position[2] + 40}
    self.tabsContainer.Color = self.config.theme.secondary
    self.tabsContainer.Filled = true
end

-- Restante das funções mantidas com melhorias visuais

function SevereUI:CreateButton(options)
    local btn = {
        main = Drawing.new("Square"),
        text = Drawing.new("Text"),
        effect = Drawing.new("Square")
    }
    
    btn.main.Size = options.size
    btn.main.Position = options.position
    btn.main.Color = self.config.theme.secondary
    btn.main.Filled = true
    btn.main.Rounding = 4
    
    btn.effect.Size = options.size
    btn.effect.Position = options.position
    btn.effect.Color = self.config.theme.accent
    btn.effect.Filled = true
    btn.effect.Transparency = 0
    
    btn.text.Text = options.text
    btn.text.Position = {
        options.position[1] + (options.size[1]/2) - (Drawing.CalcTextWidth(options.text)/2),
        options.position[2] + (options.size[2]/2) - 7
    }
    btn.text.Color = self.config.theme.text
    btn.text.Size = self.config.textSize
    btn.text.Font = self.config.font
    
    -- Animação de hover
    function btn:Update()
        local mousePos = getmouseposition()
        local isHovered = self:IsMouseOver()
        
        self.effect.Transparency = isHovered and math.min(self.effect.Transparency + 0.1, 0.4)
            or math.max(self.effect.Transparency - 0.1, 0)
        
        if isHovered and isleftclicked() then
            self.main.Position.y = self.main.Position.y + 1
        else
            self.main.Position.y = options.position[2]
        end
    end
    
    return btn
end

function SevereUI:CreateDropdown(options)
    local dropdown = {
        main = Drawing.new("Square"),
        header = Drawing.new("Square"),
        options = {},
        open = false
    }
    
    -- Estilo moderno
    dropdown.header.Size = {options.size[1], 30}
    dropdown.header.Position = options.position
    dropdown.header.Color = self.config.theme.secondary
    dropdown.header.Filled = true
    dropdown.header.Rounding = 4
    
    -- Ícone animado
    dropdown.icon = Drawing.new("Triangle")
    dropdown.icon.PointA = {options.position[1] + options.size[1] - 15, options.position[2] + 12}
    dropdown.icon.PointB = {options.position[1] + options.size[1] - 10, options.position[2] + 18}
    dropdown.icon.PointC = {options.position[1] + options.size[1] - 20, options.position[2] + 18}
    dropdown.icon.Color = self.config.theme.text
    dropdown.icon.Filled = true
    
    -- Opções com hover
    for i, option in ipairs(options.options) do
        local opt = {
            bg = Drawing.new("Square"),
            text = Drawing.new("Text")
        }
        
        opt.bg.Size = {options.size[1], 25}
        opt.bg.Position = {options.position[1], options.position[2] + 30 + ((i-1)*25)}
        opt.bg.Color = self.config.theme.primary
        opt.bg.Filled = true
        
        opt.text.Text = option
        opt.text.Position = {options.position[1] + 10, opt.bg.Position[2] + 6}
        opt.text.Color = self.config.theme.text
        opt.text.Size = self.config.textSize
        
        table.insert(dropdown.options, opt)
    end
    
    function dropdown:Toggle()
        self.open = not self.open
        self.icon.Color = self.open and self.config.theme.accent or self.config.theme.text
        for _, opt in ipairs(self.options) do
            opt.bg.Visible = self.open
            opt.text.Visible = self.open
        end
    end
    
    return dropdown
end

-- Funções atualizadas de gerenciamento de estado

function SevereUI:UpdateDeadZones()
    if #self.Windows == 0 then return end
    
    local topWindow = self.Windows[#self.Windows]
    local pos = topWindow.frame.Position
    local size = topWindow.frame.Size
    
    self.DeadZone = {
        pos[1], pos[2],
        pos[1] + size[1],
        pos[2] + size[2]
    }
end

function SevereUI:RenderAll()
    self:UpdateDeadZones()
    
    for i, window in ipairs(self.Windows) do
        if window.visible then
            -- Renderizar sombras
            for _, shadow in ipairs(window.depthEffects) do
                shadow.Visible = window.visible
            end
            
            -- Renderizar elementos principais
            window.frame.Visible = window.visible
            window.tabsContainer.Visible = window.visible
            
            -- Renderizar elementos da janela
            for _, element in ipairs(window.elements) do
                if element.Render then element:Render() end
            end
            
            -- Atualizar tooltips
            self:UpdateTooltips()
        end
    end
    
    self:RenderNotifications()
end

-- Sistema de notificações

function SevereUI:Notify(text, duration)
    local notification = {
        lines = {},
        startTime = os.clock(),
        duration = duration or 5,
        elements = {bg = Drawing.new("Square"), texts = {}}
    }
    
    for line in text:gmatch("[^\n]+") do
        local textObj = Drawing.new("Text")
        textObj.Text = line
        textObj.Color = self.config.theme.text
        textObj.Size = self.config.textSize
        table.insert(notification.elements.texts, textObj)
    end
    
    table.insert(self.Notifications, notification)
end

function SevereUI:RenderNotifications()
    local currentTime = os.clock()
    
    for i = #self.Notifications, 1, -1 do
        local notif = self.Notifications[i]
        local progress = (currentTime - notif.startTime) / notif.duration
        
        if progress < 1 then
            local yPos = 10 + (i-1) * 60
            notif.elements.bg.Position = {10, yPos}
            notif.elements.bg.Size = {250, #notif.lines * 20 + 10}
            notif.elements.bg.Color = self.config.theme.dark
            notif.elements.bg.Transparency = 0.9 * (1 - progress)
            
            for j, text in ipairs(notif.elements.texts) do
                text.Position = {15, yPos + 5 + (j-1)*20}
                text.Transparency = 1 - progress
            end
        else
            notif.elements.bg:Remove()
            for _, text in ipairs(notif.elements.texts) do text:Remove() end
            table.remove(self.Notifications, i)
        end
    end
end

-- Funções de utilidade mantidas

function SevereUI:MouseInArea(area)
    local mousePos = getmouseposition()
    return mousePos.x >= area[1] and mousePos.y >= area[2]
        and mousePos.x <= area[3] and mousePos.y <= area[4]
        and not self:IsInDeadZone(mousePos.x, mousePos.y)
end

function SevereUI:IsInDeadZone(x, y)
    return self.DeadZone and x >= self.DeadZone[1] and y >= self.DeadZone[2]
        and x <= self.DeadZone[3] and y <= self.DeadZone[4]
end

-- Métodos restantes (Show, Hide, Destroy, etc.) mantidos com ajustes visuais

return SevereUI
